{"version":3,"sources":["scripts/api.js","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["request","endPoint","fetch","then","response","json","result","data","getUser","userId","TodoList","state","titleFilter","sortTodos","random","todos","filter","todo","completed","shuffle","index","todosLength","length","Math","floor","push","splice","this","props","selectedUser","selectUser","preparedTodos","className","htmlFor","type","placeholder","id","value","onChange","event","setState","target","name","classNames","onClick","map","title","includes","key","readOnly","checked","React","Component","defaultProps","CurrentUser","user","loadNewUser","prevProps","clearUser","email","phone","App","selectedUserId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b3b7f7e1.chunk.js","sourcesContent":["const baseUrl = 'https://mate-api.herokuapp.com';\n\nconst request = endPoint => (\n  fetch(`${baseUrl}${endPoint}`)\n    .then(response => response.json())\n    .then(result => result.data)\n);\n\nexport const getTodos = () => request('/todos');\nexport const getUsers = () => request('/users');\nexport const getUser = userId => request(`/users/${userId}`);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './TodoList.scss';\n\nexport class TodoList extends React.Component {\n  state = {\n    titleFilter: '',\n    sortTodos: 'all',\n    random: false,\n  }\n\n  sortTodos = (todos) => {\n    switch (this.state.sortTodos) {\n      case 'active':\n        return todos.filter(todo => !todo.completed);\n      case 'completed':\n        return todos.filter(todo => todo.completed);\n      default:\n        return todos;\n    }\n  }\n\n  shuffle = (todos) => {\n    const result = [];\n    let todosLength = todos.length;\n    let index;\n\n    while (todosLength) {\n      // eslint-disable-next-line no-plusplus\n      index = Math.floor(Math.random() * todosLength--);\n      result.push(todos.splice(index, 1)[0]);\n    }\n\n    return result;\n  }\n\n  render() {\n    const {\n      selectedUser,\n      selectUser,\n      todos,\n    } = this.props;\n\n    const { titleFilter, sortTodos, random } = this.state;\n\n    let preparedTodos = this.sortTodos([...todos]);\n\n    if (random) {\n      preparedTodos = this.shuffle(preparedTodos);\n    }\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <label htmlFor=\"filterByTitle\">\n          {`Filter todos by title `}\n          <input\n            className=\"sorting-input\"\n            type=\"text\"\n            placeholder=\"Enter a query\"\n            id=\"filterByTitle\"\n            value={titleFilter}\n            onChange={(event) => {\n              this.setState({ titleFilter: event.target.value });\n            }}\n          />\n        </label>\n\n        <select\n          className=\"sorting-input\"\n          name=\"sortingTodos\"\n          id=\"sortingTodos\"\n          value={sortTodos}\n          onChange={(event) => {\n            this.setState({ sortTodos: event.target.value });\n          }}\n        >\n          <option value=\"all\">Show all todos</option>\n          <option value=\"active\">Show uncomplited todos</option>\n          <option value=\"completed\">Show complited todos</option>\n        </select>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'sorting-input',\n            {\n              'randomize-active': random,\n              'randomize-inactive': !random,\n            },\n          )}\n          onClick={() => {\n            this.setState(state => (\n              { random: !state.random }\n            ));\n          }}\n        >\n          Randomize\n        </button>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {preparedTodos.map((todo) => {\n              if (todo.title && todo.title.includes(titleFilter)) {\n                return (\n                  <li\n                    className={classNames(\n                      'TodoList__item',\n                      {\n                        'TodoList__item--checked': todo.completed,\n                        'TodoList__item--unchecked': !todo.completed,\n                      },\n                    )}\n                    key={todo.id}\n                  >\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        readOnly\n                        checked={todo.completed}\n                      />\n                      <p>{todo.title}</p>\n                    </label>\n\n                    <button\n                      className={classNames(\n                        'TodoList__user-button', 'button',\n                        { 'TodoList__user-button--selected':\n                          selectedUser === todo.userId },\n                      )}\n                      type=\"button\"\n                      onClick={() => {\n                        selectUser(todo.userId);\n                      }}\n                    >\n                      {todo.userId ? (\n                        <>\n                          User&nbsp;#\n                          {todo.userId}\n                        </>\n                      ) : (\n                        <>\n                          not assigned\n                        </>\n                      )}\n                    </button>\n                  </li>\n                );\n              }\n\n              return null;\n            })}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string,\n      completed: PropTypes.bool,\n      userId: PropTypes.number,\n    }),\n  ),\n  selectedUser: PropTypes.number,\n  selectUser: PropTypes.func.isRequired,\n};\n\nTodoList.defaultProps = {\n  todos: [],\n  selectedUser: 0,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n// import classNames from 'classnames';\nimport { getUser } from '../../scripts/api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n  }\n\n  componentDidMount() {\n    this.loadNewUser();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadNewUser();\n    }\n  }\n\n  loadNewUser = () => {\n    getUser(this.props.userId)\n      .then((user) => {\n        this.setState({ user });\n      });\n  }\n\n  render() {\n    const { user } = this.state;\n    const { clearUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        {user ? (\n          <>\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                {`Selected user: ${user.id}`}\n              </span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">\n              {user.name}\n            </h3>\n            <p className=\"CurrentUser__email\">\n              {user.email}\n            </p>\n            <p className=\"CurrentUser__phone\">\n              {user.phone}\n            </p>\n\n            <button\n              className=\"CurrentUser__clear button\"\n              type=\"button\"\n              onClick={() => {\n                clearUser();\n              }}\n            >\n              Clear selected user\n            </button>\n          </>\n        ) : (\n          <>\n            Loading...\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { getTodos } from './scripts/api';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then((todos) => {\n        this.setState({ todos });\n      });\n  }\n\n  selectUser = (userId) => {\n    this.setState({ selectedUserId: userId });\n  }\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectedUser={selectedUserId}\n            selectUser={this.selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId && selectedUserId !== null ? (\n              <CurrentUser userId={selectedUserId} clearUser={this.clearUser} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}